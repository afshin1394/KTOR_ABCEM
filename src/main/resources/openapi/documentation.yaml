openapi: "3.1.0"
info:
  title: "abcem API"
  description: "abcem API"
  version: "1.0.0"
servers:
  - url: "http://192.168.50.120:80"
paths:
  /api/authorization/ipInfo:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/IpInfoDTO"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "no ip associated with address"
                Example#2:
                  value: "details not available"
  /api/users/create:
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDTO"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "string"
  /api/users/getAll:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserDTO"
  /api/users/insertAll:
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/UserDTO"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "string"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
  /session/increment:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
components:
  schemas:
    IpInfoDTO:
      type: "object"
      properties:
        ip:
          type: "string"
        hostname:
          type: "string"
        city:
          type: "string"
        region:
          type: "string"
        country:
          type: "string"
        loc:
          type: "string"
        org:
          type: "string"
        postal:
          type: "string"
        timezone:
          type: "string"
    UserDTO:
      type: "object"
      properties:
        name:
          type: "string"
        age:
          type: "integer"
          format: "int32"
      required:
      - "name"